<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning and Forgetting in Neural Networks</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/</link><atom:link href="https://ckids-datafest.github.io/2023-fall-nn-forgetting/index.xml" rel="self" type="application/rss+xml"/><description>Learning and Forgetting in Neural Networks</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 24 Oct 2022 00:00:00 +0000</lastBuildDate><image><url>https://ckids-datafest.github.io/2023-fall-nn-forgetting/media/icon_hu5486d42984c30aaff6be99d37062b147_3155_512x512_fill_lanczos_center_3.png</url><title>Learning and Forgetting in Neural Networks</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/</link></image><item><title>People</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/people/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://ckids-datafest.github.io/2023-fall-nn-forgetting/people/</guid><description/></item><item><title>Approach</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/approach/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://ckids-datafest.github.io/2023-fall-nn-forgetting/approach/</guid><description>&lt;h2 id="data-preprocessing">Data Preprocessing&lt;/h2>
&lt;p>a) IID Data scenario : Each model was trained on a equal share of all the classes in the dataset.&lt;/p>
&lt;p>b) Non-IID Data scenario: &lt;br>
We simulate the non-IID data distribution using the following logic:&lt;/p>
&lt;pre>&lt;code> client_a : (labels == 'T-Shirt/top') | (labels == 'Trouser') | (labels == 'Pullover')
client_b : (labels == 'Dress') | (labels == 'Coat')
client_c : (labels == 'Sandal') | (labels == 'Shirt')
client_d : (labels == 'Sneaker') | (labels == 'Bag') | (labels == 'Ankle Boot')
&lt;/code>&lt;/pre>
&lt;h2 id="model-development">Model Development&lt;/h2>
&lt;p>We used the following Convolutional Neural Network for all the clients and the community model : &lt;br>&lt;/p>
&lt;pre>&lt;code> _________________________________________________________________
Layer (type) Output Shape Param #
=================================================================
fashion (InputLayer) [(None, 28, 28, 1)] 0
conv2d_240 (Conv2D) (None, 24, 24, 128) 3328
max_pooling2d_240 (MaxPool (None, 12, 12, 128) 0
ing2D)
conv2d_241 (Conv2D) (None, 6, 6, 128) 802944
max_pooling2d_241 (MaxPool (None, 3, 3, 128) 0
ing2D)
flatten_120 (Flatten) (None, 1152) 0
dense_120 (Dense) (None, 512) 590336
predictions (Dense) (None, 10) 5130
=================================================================
Total params: 1401738 (5.35 MB)
Trainable params: 1401738 (5.35 MB)
Non-trainable params: 0 (0.00 Byte)
_________________________________________________________________
&lt;/code>&lt;/pre>
&lt;p>We used Keras wrapper on Tensorflow for implementing the models. For visualization we stuck to Matplotlib and Seaborn.&lt;/p>
&lt;p>For the scaffold model, each model was also equipped with client control variate for each layer to adjust for the drift. Since we had the architecture of our model fixed before hand, we could keep the vector structures of the control variates also the same as the layer weights.&lt;/p>
&lt;pre>&lt;code> class ControlVariate():
def __init__(self):
self.conv1_c = tensorflow.zeros((5,5,1,128))
self.conv2_c = tensorflow.zeros((7,7,128,128))
self.flatten1_c = tensorflow.zeros((1152,512))
self.flatten2_c = tensorflow.zeros((512,10))
self.pred_c = tensorflow.zeros((10,))
&lt;/code>&lt;/pre>
&lt;p>We implemented the suggestions laid down by the SCAFFOLD Paper with each mini-batch train step as mentioned in the algorithm outlined in the paper.&lt;br>&lt;/p>
&lt;img src = "scaffold_algorithm.png"/>
&lt;h2 id="model-evaluation">Model Evaluation&lt;/h2>
&lt;h3 id="a-evaluation-of-performance--br">a) Evaluation of performance : &lt;br>&lt;/h3>
&lt;p>The evaluation dataset has 10000 instances of all classes to test how the clients perform on the global dataset. This enables to check if the knowledge has been transferred merely through weight transmission.&lt;/p>
&lt;h3 id="b-evaluation-of-client-drift">b) Evaluation of client drift:&lt;/h3>
&lt;p>The objective of this metric was to measure the client drift. We wanted to answer the question : how to visualize the drift of a model from it&amp;rsquo;s optima? The model output is the function of the weights of the model. We take the softmax output of the last layer of the client and we extract two probability distributions: one before the local training (after the weights are distributed from the community model) and one after the local training. We then measure the KL Divergence of the two probability distributions to see how much the output distribution varies from the community model. This is essentially the catastrophic forgetting described in the earlier sections. Interesting, this is also problem in Transfer Learning: how much of the pre-trained knowledge is lost in the fine-tuning but in the case of transfer learning, it&amp;rsquo;s core purpose and evaluation metrics lies in domain of the finetuned data. We don&amp;rsquo;t worry that much about the pre-trained knowledge.&lt;/p>
&lt;h3 id="c-visualization-of-the-class-clustering">c) Visualization of the class clustering:&lt;/h3>
&lt;p>Within the dataset, certain instances pose significant challenges. To define this difficulty, consider the scenario where a shirt and a pullover exhibit remarkable similarity. The model must discern subtle distinctions between them. Our aim was to visually represent this clustering by examining the neural network&amp;rsquo;s weight. Following each round, we fed a segment of the validation dataset through the network, capturing the activations from the final Dense layer of the CNN. We then reduced the dimensionality from 512 to 2 using t-SNE and plotted the resulting points after each round. The animated visualizations can be found in the Results section.&lt;/p></description></item><item><title>Data Assessment</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/data/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://ckids-datafest.github.io/2023-fall-nn-forgetting/data/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Since we were dealing with a very fundamental issue, we picked a very simple dataset to first reproduce the issue and later research ways on how to fix it.&lt;/p>
&lt;h2 id="data-overview-and-examples">Data Overview and Examples&lt;/h2>
&lt;p>We used the Fashion mnist dataset for this problem statement. We also tried to run the system with Cifar-10 dataset. Despite being fairly simplistic in nature, these datasets can be engineered to get a non-IID and IID fractions. Very simply put, IID stands for data that comes from independent, identically distributed dataset. Non-IID is the exact opposite of that. This dataset doesn&amp;rsquo;t share a common distribution. In real life Machine Learning problem statement, the dataset is predominantly Non-IID and also we generally don&amp;rsquo;t know the true underlying distribution of the data. So it is very important that we truly understand this problem and make attempts to solve it. &lt;br>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">IID&lt;/th>
&lt;th style="text-align:center">Non-IID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="iid" srcset="
/2023-fall-nn-forgetting/data/iid_dataset_hu6368d4c95c94cc5b732c5fa115a806f7_21371_0dbc176a3fbc57467ace422438664d18.webp 400w,
/2023-fall-nn-forgetting/data/iid_dataset_hu6368d4c95c94cc5b732c5fa115a806f7_21371_da48196f9fc87df0a6c2b58a0d98fb06.webp 760w,
/2023-fall-nn-forgetting/data/iid_dataset_hu6368d4c95c94cc5b732c5fa115a806f7_21371_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/data/iid_dataset_hu6368d4c95c94cc5b732c5fa115a806f7_21371_0dbc176a3fbc57467ace422438664d18.webp"
width="580"
height="455"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;td style="text-align:center">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non_iid" srcset="
/2023-fall-nn-forgetting/data/non-iid_hu9286bcb2ec6bac18a5a3a77dbf11d497_21337_04aade0ef92ac09dcda81f11103c1c7f.webp 400w,
/2023-fall-nn-forgetting/data/non-iid_hu9286bcb2ec6bac18a5a3a77dbf11d497_21337_af59b6d33c1994a394ea66ded14396e2.webp 760w,
/2023-fall-nn-forgetting/data/non-iid_hu9286bcb2ec6bac18a5a3a77dbf11d497_21337_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/data/non-iid_hu9286bcb2ec6bac18a5a3a77dbf11d497_21337_04aade0ef92ac09dcda81f11103c1c7f.webp"
width="580"
height="455"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This is simply how we simulate IID and Non-IID dataset from Fashion Mnist data.&lt;/p></description></item><item><title>Problem and Requirements</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/problem-statement/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://ckids-datafest.github.io/2023-fall-nn-forgetting/problem-statement/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Federated Learning originates from the rising concerns about data privacy and the constraints of conventional centralized machine learning approaches. It emerged as a solution to safeguard user privacy while leveraging the wealth of knowledge found in dispersed data sources.&lt;/p>
&lt;p>Industries increasingly embraced this concept upon realizing its potential for cooperative learning within the bounds of data privacy regulations. Its rapid evolution owes much to progress in encryption methods, communication protocols, and decentralized optimization algorithms. Presently, Federated Learning represents an encouraging framework that facilitates collaboration among diverse entities, prioritizing the protection of confidential user information and driving advancements in privacy-focused machine learning.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Prof. Abram wanted us to address a very specific scenario. In the original Fed avg. paper, there is a recommendation put forward that the weights from the community be overwritten at the local client site. Now consider the example of a hospital with multiple sites and there is a model that predicts a condition based on certain characteristics. This case can be Non-IID in the sense that a form of condition might have never been encountered at a site. If we can use federated learning to solve this problem, then the sensitivity of the patient&amp;rsquo;s privacy at a differnt client is maintained and the characteristics are learnt without any network overhead. But in Non-IID case, there is catastrophic forgetting at the client level. The task completely pulls the community weights in the direction of the local minima!&lt;/p>
&lt;p>Under IID conditions, &lt;br>
&lt;img src = "iid.png"/> &lt;br>&lt;/p>
&lt;p>Under Non-IID conditions, &lt;br>
&lt;img src = "non_iid.png"/>&lt;/p>
&lt;p>Our motivation for the semester was two folds : First, to understand the drift of the community model and second to visualize and understand the catastrophic forgetting exhibited by the client models.&lt;/p>
&lt;h2 id="problem-for-the-semester">Problem for the Semester&lt;/h2>
&lt;p>For the semester, we had two simple goals : To establish a working federated learning network - a problem statement rooted in Engineering and the second one was to visualized how the clients drifted - to answer the question : how does one quantify this drift?&lt;/p>
&lt;h2 id="state-of-the-art">State of the Art&lt;/h2>
&lt;p>We initially sought to reproduce and test the network proposed in &lt;a href = "https://iopscience.iop.org/article/10.1088/1361-6501/acf7da/meta">FedSiM&lt;/a>. We shall report the findings in the subsequent sections. We were also fascinated by the amazing math based proof for fixing client drifts in &lt;a href = "https://proceedings.mlr.press/v119/karimireddy20a.html">SCAFFOLD: Stochastic Controlled Averaging
for Federated Learning&lt;/a> and wanted to implement the paper&amp;rsquo;s proposed system.&lt;/p>
&lt;h2 id="design-and-approach">Design and Approach&lt;/h2>
&lt;p>Though initially framed as an engineering problem, at its essence, this constituted a research project aimed at exploring and executing various academic papers to evaluate their effectiveness. Consequently, we implemented two noteworthy papers over the semester to analyze and observe their outcomes.
&lt;br>
(1) For FedSiM paper : We built a network of Convolution Neural Networks(clients) and a Community model. Like it is proposed in the paper, we manipulated each neuron in every layer of the network with a small value to observe its overall impact on the output of the network.
&lt;br>
(2) For the SCAFFOLD paper : We built a Federated network of convolutional neural networks and a community model. Each model was equipped with a client control variate as proposed in the paper to account and adjust for the client drift.&lt;/p></description></item><item><title>Results</title><link>https://ckids-datafest.github.io/2023-fall-nn-forgetting/results/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://ckids-datafest.github.io/2023-fall-nn-forgetting/results/</guid><description>&lt;h2 id="visualization-of-the-last-layer-of-the-model">Visualization of the last layer of the model&lt;/h2>
&lt;p>So how does the softmax layer give out the classes to be predicted. It takes the activations from the last layer of the model. We took a specific class-balanced subset of the test dataset and pulled out the activations from the last layer of the model. After reducing the dimension of the activation for an instance to 2 using t-SNE, we plotted the each instance colored by its target label. If the classes are placed well apart, it visually shows that even in two dimensions, these class clusters can be separated. Not a very accurate way but makes up for a visual. After all, we are very visual beings. :)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>IID&lt;/th>
&lt;th>Non-IID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="iid"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/iid_community.gif"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non_iid"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/community_non_iid.gif"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>As the rounds proceed, there is clear separation in the IID-cases but in the non-IID case, there is still a lot of overlap.&lt;/p>
&lt;h2 id="kl-divergence">KL Divergence&lt;/h2>
&lt;p>KL Divergence can show the disimilarity between two probability distributions. The final output is the function of the weights of the models. So we propose using KL Divergence as a measure of the catastrophic forgetting happening at the client sites. Specifically, KL Divergence between the probability distributions obtained from the community model and the local model after a round of finetuning is taken. A low divergence score is a good thing!&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>IID&lt;/th>
&lt;th>Non-IID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="iid" srcset="
/2023-fall-nn-forgetting/results/fed_iid_kl_hud7e4e58de6ff8f54ab94a7a9e5b380d5_41322_ed3fcd1e18627eeb68b07fc5fbb4a77c.webp 400w,
/2023-fall-nn-forgetting/results/fed_iid_kl_hud7e4e58de6ff8f54ab94a7a9e5b380d5_41322_b5a0ae9158cca82dc67ca0d2a9e994e9.webp 760w,
/2023-fall-nn-forgetting/results/fed_iid_kl_hud7e4e58de6ff8f54ab94a7a9e5b380d5_41322_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/fed_iid_kl_hud7e4e58de6ff8f54ab94a7a9e5b380d5_41322_ed3fcd1e18627eeb68b07fc5fbb4a77c.webp"
width="760"
height="441"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non_iid" srcset="
/2023-fall-nn-forgetting/results/fed-noniid-kl_hu1e047e57ab35ea56ea8e8ec582abe665_71674_cd98e8b420bb2a67c87a0edd171171f6.webp 400w,
/2023-fall-nn-forgetting/results/fed-noniid-kl_hu1e047e57ab35ea56ea8e8ec582abe665_71674_34e8427ea47c7de29661ea7c7ac10003.webp 760w,
/2023-fall-nn-forgetting/results/fed-noniid-kl_hu1e047e57ab35ea56ea8e8ec582abe665_71674_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/fed-noniid-kl_hu1e047e57ab35ea56ea8e8ec582abe665_71674_cd98e8b420bb2a67c87a0edd171171f6.webp"
width="760"
height="435"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="validation-accuracy-plots">Validation accuracy plots&lt;/h2>
&lt;p>We plotted the validation set accuracy for the community model as well as the clients. For the clients, the validation set contains all the classes and not just the classes it has in its local site.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>IID&lt;/th>
&lt;th>Non-IID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="iid" srcset="
/2023-fall-nn-forgetting/results/iid-new-graph_huf6161251a13930a68fcd93bcf01c4727_108319_a85e9c927230447f676e9d42b96727b7.webp 400w,
/2023-fall-nn-forgetting/results/iid-new-graph_huf6161251a13930a68fcd93bcf01c4727_108319_b666a464fe71b45d520f92c7d74b368c.webp 760w,
/2023-fall-nn-forgetting/results/iid-new-graph_huf6161251a13930a68fcd93bcf01c4727_108319_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/iid-new-graph_huf6161251a13930a68fcd93bcf01c4727_108319_a85e9c927230447f676e9d42b96727b7.webp"
width="760"
height="425"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non_iid" srcset="
/2023-fall-nn-forgetting/results/non-IIDnew_huab5c57272e63876f7862587895f22ad7_97936_e4a3d69796cbe099eee22b118851aade.webp 400w,
/2023-fall-nn-forgetting/results/non-IIDnew_huab5c57272e63876f7862587895f22ad7_97936_b8efe313bd5947502d647d5c2b090fa0.webp 760w,
/2023-fall-nn-forgetting/results/non-IIDnew_huab5c57272e63876f7862587895f22ad7_97936_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/non-IIDnew_huab5c57272e63876f7862587895f22ad7_97936_e4a3d69796cbe099eee22b118851aade.webp"
width="760"
height="430"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This plot essentially brings out the two issues we are trying to address. First, the validation accuracy of the community model is off by 10% in case of Non-IID data, which shows a drift in the community model. Second, the local clients never do that well on the validation set! It has poor accuracy. These are the two issues we sought to visualize and fix, if possible!&lt;/p>
&lt;h2 id="scaffold">Scaffold&lt;/h2>
&lt;p>Scaffold addresses the issue by adjusting for the client drift.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Validation plot&lt;/th>
&lt;th>KL Divergence&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non-iid" srcset="
/2023-fall-nn-forgetting/results/scaffold_noniid_hu8a58688dd71fdd82ffbd77150ff5e68d_151562_35c04c4ed1739402a50160a10713ec4c.webp 400w,
/2023-fall-nn-forgetting/results/scaffold_noniid_hu8a58688dd71fdd82ffbd77150ff5e68d_151562_7f77edc08805b379f3a185798900c87b.webp 760w,
/2023-fall-nn-forgetting/results/scaffold_noniid_hu8a58688dd71fdd82ffbd77150ff5e68d_151562_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/scaffold_noniid_hu8a58688dd71fdd82ffbd77150ff5e68d_151562_35c04c4ed1739402a50160a10713ec4c.webp"
width="760"
height="430"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;td>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="non-iid" srcset="
/2023-fall-nn-forgetting/results/scaffold_kl_hu44c17518009861492310c5c97c9dc5bf_137365_d8a6145751ea8cf99c65db65d14a9c78.webp 400w,
/2023-fall-nn-forgetting/results/scaffold_kl_hu44c17518009861492310c5c97c9dc5bf_137365_ccd93ec2866cc04ef508e505129c4f9b.webp 760w,
/2023-fall-nn-forgetting/results/scaffold_kl_hu44c17518009861492310c5c97c9dc5bf_137365_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://ckids-datafest.github.io/2023-fall-nn-forgetting/2023-fall-nn-forgetting/results/scaffold_kl_hu44c17518009861492310c5c97c9dc5bf_137365_d8a6145751ea8cf99c65db65d14a9c78.webp"
width="760"
height="425"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="discussion-of-findings">Discussion of Findings&lt;/h2>
&lt;p>While there may not be significant fixes at this stage, the semester long research into understanding the problem statement gave us two prominent papers and how they fail to work with our problem statement.&lt;br>&lt;/p>
&lt;p>(i) At this point, we believe with scaffold, the pulling back of the client models at each local step prevents it from capturing the intricacies of the dataset locally thus affecting the performance of the global community model. &lt;br>&lt;/p>
&lt;p>(ii) We investigated how this drift happens at each layer and found the first layer to be the most divergent. While this could be attributed to the fact that the input layer changes most with introduction of new data (global validation to local clients), a counter argument can also be made that the first layer picks up basic features and as the layers progresses, the features get accumulated to get a bigger picture. &lt;br>&lt;/p></description></item></channel></rss>